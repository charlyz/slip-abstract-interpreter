main(){
   array = new/10;

   array = array.readArray();

   present = contains(array, new/1);

   if (present == false()) 
      write(0);            
   else 
      write(237);          
   
   return(null);           
}

un()     {return (new/1) ; }
succ/1() {return (new/2) ; }
succ/2() {return (new/3) ; }
succ/3() {return (new/4) ; }
succ/4() {return (new/5) ; }
succ/5() {return (new/6) ; }
succ/6() {return (new/7) ; }
succ/7() {return (new/8) ; }
huit()   {return (new/8) ; }


readArray/1() { x = this; read(x.1) ; return(this); }
readArray/2() { x = super.readArray(); read(x.2) ; return(x) ; }
readArray/3() { x = super.readArray(); read(x.3) ; return(x) ; }
readArray/4() { x = super.readArray(); read(x.4) ; return(x) ; }
readArray/5() { x = super.readArray(); read(x.5) ; return(x) ; }
readArray/6() { x = super.readArray(); read(x.6) ; return(x) ; }
readArray/7() { x = super.readArray(); read(x.7) ; return(x) ; }


makeArray(i) 
{
  if (i == 1) return(new/1) ;
  if (i == 2) return(new/2) ;
  if (i == 3) return(new/3) ;
  if (i == 4) return(new/4) ;
  if (i == 5) return(new/5) ;
  if (i == 6) return(new/6) ;
  if (i == 7) return(new/7) ;
  return(null) ;
}

true() {return (new/1) ; }
false() {return (null) ; }

equalsTo1/1 (){ return (true()); }
equalsTo1/2 (){ return (false()); }

equalsTo2/1 (){ return (false()); }
equalsTo2/2 (){ return (true()); }
equalsTo2/3 (){ return (false()); }

equalsTo3/1 (){ return (false()); }
equalsTo3/3 (){ return (true()); }
equalsTo3/4 (){ return (false()); }

equalsTo4/1 (){ return (false()); }
equalsTo4/4 (){ return (true()); }
equalsTo4/5 (){ return (false()); }

equalsTo5/1 (){ return (false()); }
equalsTo5/5 (){ return (true()); }
equalsTo5/6 (){ return (false()); }

equalsTo6/1 (){ return (false()); }
equalsTo6/6 (){ return (true()); }
equalsTo6/7 (){ return (false()); }

equalsTo7/1 (){ return (false()); }
equalsTo7/7 (){ return (true()); }
equalsTo7/8 (){ return (false()); }

equalsTo8/1 (){ return (false()); }

equals/1(x) { return (x.equalsTo1()) ; }
equals/2(x) { return (x.equalsTo2()) ; }
equals/3(x) { return (x.equalsTo3()) ; }
equals/4(x) { return (x.equalsTo4()) ; }
equals/5(x) { return (x.equalsTo5()) ; }
equals/6(x) { return (x.equalsTo6()) ; }
equals/7(x) { return (x.equalsTo7()) ; }
equals/8(x) { return (x.equalsTo8()) ; }

val/1(x){ return (x.1) ; }
val/2(x){ return (x.2) ; }
val/3(x){ return (x.3) ; }
val/4(x){ return (x.4) ; }
val/5(x){ return (x.5) ; }
val/6(x){ return (x.6) ; }
val/7(x){ return (x.7) ; }

contains(array, x)
{
  present = false();
  i = un();
  lengthPlus1  = array ;

/* Invariant :
|  [Syntactic error: Identifier expected instead of /]

   present ssi x figure dans array[1.. i-1]

*/
  while (i.equals(lengthPlus1) == false() & present == false())
   { if (i.val(array) == x) present = true();
     i = i.succ();
   }

  return (present); 
}
